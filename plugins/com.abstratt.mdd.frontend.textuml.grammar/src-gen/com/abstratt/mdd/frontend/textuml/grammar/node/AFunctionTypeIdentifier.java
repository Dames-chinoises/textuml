/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionTypeIdentifier extends PTypeIdentifier
{
    private PFunctionSignature _functionSignature_;
    private POptionalMultiplicity _optionalMultiplicity_;

    public AFunctionTypeIdentifier()
    {
        // Constructor
    }

    public AFunctionTypeIdentifier(
        @SuppressWarnings("hiding") PFunctionSignature _functionSignature_,
        @SuppressWarnings("hiding") POptionalMultiplicity _optionalMultiplicity_)
    {
        // Constructor
        setFunctionSignature(_functionSignature_);

        setOptionalMultiplicity(_optionalMultiplicity_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionTypeIdentifier(
            cloneNode(this._functionSignature_),
            cloneNode(this._optionalMultiplicity_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionTypeIdentifier(this);
    }

    public PFunctionSignature getFunctionSignature()
    {
        return this._functionSignature_;
    }

    public void setFunctionSignature(PFunctionSignature node)
    {
        if(this._functionSignature_ != null)
        {
            this._functionSignature_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionSignature_ = node;
    }

    public POptionalMultiplicity getOptionalMultiplicity()
    {
        return this._optionalMultiplicity_;
    }

    public void setOptionalMultiplicity(POptionalMultiplicity node)
    {
        if(this._optionalMultiplicity_ != null)
        {
            this._optionalMultiplicity_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._optionalMultiplicity_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionSignature_)
            + toString(this._optionalMultiplicity_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._functionSignature_ == child)
        {
            this._functionSignature_ = null;
            return;
        }

        if(this._optionalMultiplicity_ == child)
        {
            this._optionalMultiplicity_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._functionSignature_ == oldChild)
        {
            setFunctionSignature((PFunctionSignature) newChild);
            return;
        }

        if(this._optionalMultiplicity_ == oldChild)
        {
            setOptionalMultiplicity((POptionalMultiplicity) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
