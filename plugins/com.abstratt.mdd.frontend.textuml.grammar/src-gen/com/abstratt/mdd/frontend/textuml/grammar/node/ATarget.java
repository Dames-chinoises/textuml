/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ATarget extends PTarget
{
    private POperand _operand_;
    private PObjectDot _objectDot_;

    public ATarget()
    {
        // Constructor
    }

    public ATarget(
        @SuppressWarnings("hiding") POperand _operand_,
        @SuppressWarnings("hiding") PObjectDot _objectDot_)
    {
        // Constructor
        setOperand(_operand_);

        setObjectDot(_objectDot_);

    }

    @Override
    public Object clone()
    {
        return new ATarget(
            cloneNode(this._operand_),
            cloneNode(this._objectDot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATarget(this);
    }

    public POperand getOperand()
    {
        return this._operand_;
    }

    public void setOperand(POperand node)
    {
        if(this._operand_ != null)
        {
            this._operand_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operand_ = node;
    }

    public PObjectDot getObjectDot()
    {
        return this._objectDot_;
    }

    public void setObjectDot(PObjectDot node)
    {
        if(this._objectDot_ != null)
        {
            this._objectDot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._objectDot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._operand_)
            + toString(this._objectDot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._operand_ == child)
        {
            this._operand_ = null;
            return;
        }

        if(this._objectDot_ == child)
        {
            this._objectDot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._operand_ == oldChild)
        {
            setOperand((POperand) newChild);
            return;
        }

        if(this._objectDot_ == oldChild)
        {
            setObjectDot((PObjectDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
