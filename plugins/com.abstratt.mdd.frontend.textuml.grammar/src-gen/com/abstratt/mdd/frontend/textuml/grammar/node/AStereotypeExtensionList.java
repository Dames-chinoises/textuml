/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import java.util.*;
import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AStereotypeExtensionList extends PStereotypeExtensionList
{
    private PStereotypeExtension _stereotypeExtension_;
    private final LinkedList<PStereotypeExtensionListTail> _stereotypeExtensionListTail_ = new LinkedList<PStereotypeExtensionListTail>();

    public AStereotypeExtensionList()
    {
        // Constructor
    }

    public AStereotypeExtensionList(
        @SuppressWarnings("hiding") PStereotypeExtension _stereotypeExtension_,
        @SuppressWarnings("hiding") List<PStereotypeExtensionListTail> _stereotypeExtensionListTail_)
    {
        // Constructor
        setStereotypeExtension(_stereotypeExtension_);

        setStereotypeExtensionListTail(_stereotypeExtensionListTail_);

    }

    @Override
    public Object clone()
    {
        return new AStereotypeExtensionList(
            cloneNode(this._stereotypeExtension_),
            cloneList(this._stereotypeExtensionListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStereotypeExtensionList(this);
    }

    public PStereotypeExtension getStereotypeExtension()
    {
        return this._stereotypeExtension_;
    }

    public void setStereotypeExtension(PStereotypeExtension node)
    {
        if(this._stereotypeExtension_ != null)
        {
            this._stereotypeExtension_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stereotypeExtension_ = node;
    }

    public LinkedList<PStereotypeExtensionListTail> getStereotypeExtensionListTail()
    {
        return this._stereotypeExtensionListTail_;
    }

    public void setStereotypeExtensionListTail(List<PStereotypeExtensionListTail> list)
    {
        this._stereotypeExtensionListTail_.clear();
        this._stereotypeExtensionListTail_.addAll(list);
        for(PStereotypeExtensionListTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stereotypeExtension_)
            + toString(this._stereotypeExtensionListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stereotypeExtension_ == child)
        {
            this._stereotypeExtension_ = null;
            return;
        }

        if(this._stereotypeExtensionListTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stereotypeExtension_ == oldChild)
        {
            setStereotypeExtension((PStereotypeExtension) newChild);
            return;
        }

        for(ListIterator<PStereotypeExtensionListTail> i = this._stereotypeExtensionListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStereotypeExtensionListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
