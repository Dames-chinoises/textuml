/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AIsClassOperand extends POperand
{
    private PIsClassExpression _isClassExpression_;

    public AIsClassOperand()
    {
        // Constructor
    }

    public AIsClassOperand(
        @SuppressWarnings("hiding") PIsClassExpression _isClassExpression_)
    {
        // Constructor
        setIsClassExpression(_isClassExpression_);

    }

    @Override
    public Object clone()
    {
        return new AIsClassOperand(
            cloneNode(this._isClassExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIsClassOperand(this);
    }

    public PIsClassExpression getIsClassExpression()
    {
        return this._isClassExpression_;
    }

    public void setIsClassExpression(PIsClassExpression node)
    {
        if(this._isClassExpression_ != null)
        {
            this._isClassExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._isClassExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._isClassExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._isClassExpression_ == child)
        {
            this._isClassExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._isClassExpression_ == oldChild)
        {
            setIsClassExpression((PIsClassExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
