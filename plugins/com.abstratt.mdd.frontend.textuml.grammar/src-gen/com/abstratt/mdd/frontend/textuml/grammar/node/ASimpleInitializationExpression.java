/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleInitializationExpression extends PInitializationExpression
{
    private PSimpleInitialization _simpleInitialization_;

    public ASimpleInitializationExpression()
    {
        // Constructor
    }

    public ASimpleInitializationExpression(
        @SuppressWarnings("hiding") PSimpleInitialization _simpleInitialization_)
    {
        // Constructor
        setSimpleInitialization(_simpleInitialization_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleInitializationExpression(
            cloneNode(this._simpleInitialization_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleInitializationExpression(this);
    }

    public PSimpleInitialization getSimpleInitialization()
    {
        return this._simpleInitialization_;
    }

    public void setSimpleInitialization(PSimpleInitialization node)
    {
        if(this._simpleInitialization_ != null)
        {
            this._simpleInitialization_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleInitialization_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleInitialization_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleInitialization_ == child)
        {
            this._simpleInitialization_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleInitialization_ == oldChild)
        {
            setSimpleInitialization((PSimpleInitialization) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
