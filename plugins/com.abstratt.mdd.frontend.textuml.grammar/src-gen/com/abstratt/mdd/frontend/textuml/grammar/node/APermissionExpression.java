/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class APermissionExpression extends PPermissionExpression
{
    private PExpressionBlock _expressionBlock_;

    public APermissionExpression()
    {
        // Constructor
    }

    public APermissionExpression(
        @SuppressWarnings("hiding") PExpressionBlock _expressionBlock_)
    {
        // Constructor
        setExpressionBlock(_expressionBlock_);

    }

    @Override
    public Object clone()
    {
        return new APermissionExpression(
            cloneNode(this._expressionBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPermissionExpression(this);
    }

    public PExpressionBlock getExpressionBlock()
    {
        return this._expressionBlock_;
    }

    public void setExpressionBlock(PExpressionBlock node)
    {
        if(this._expressionBlock_ != null)
        {
            this._expressionBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionBlock_ == child)
        {
            this._expressionBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionBlock_ == oldChild)
        {
            setExpressionBlock((PExpressionBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
