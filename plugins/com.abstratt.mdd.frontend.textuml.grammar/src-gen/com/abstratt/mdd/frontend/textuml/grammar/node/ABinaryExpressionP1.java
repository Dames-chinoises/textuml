/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryExpressionP1 extends PExpressionP1
{
    private POperand _left_;
    private PBinaryOperatorP1 _operator_;
    private PExpressionP1 _right_;

    public ABinaryExpressionP1()
    {
        // Constructor
    }

    public ABinaryExpressionP1(
        @SuppressWarnings("hiding") POperand _left_,
        @SuppressWarnings("hiding") PBinaryOperatorP1 _operator_,
        @SuppressWarnings("hiding") PExpressionP1 _right_)
    {
        // Constructor
        setLeft(_left_);

        setOperator(_operator_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryExpressionP1(
            cloneNode(this._left_),
            cloneNode(this._operator_),
            cloneNode(this._right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryExpressionP1(this);
    }

    public POperand getLeft()
    {
        return this._left_;
    }

    public void setLeft(POperand node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public PBinaryOperatorP1 getOperator()
    {
        return this._operator_;
    }

    public void setOperator(PBinaryOperatorP1 node)
    {
        if(this._operator_ != null)
        {
            this._operator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operator_ = node;
    }

    public PExpressionP1 getRight()
    {
        return this._right_;
    }

    public void setRight(PExpressionP1 node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._operator_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._operator_ == child)
        {
            this._operator_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((POperand) newChild);
            return;
        }

        if(this._operator_ == oldChild)
        {
            setOperator((PBinaryOperatorP1) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpressionP1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
