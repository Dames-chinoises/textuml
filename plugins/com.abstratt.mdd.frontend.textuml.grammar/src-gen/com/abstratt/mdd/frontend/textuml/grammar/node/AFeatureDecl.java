/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AFeatureDecl extends PFeatureDecl
{
    private TModelComment _modelComment_;
    private PAnnotations _annotations_;
    private PModifiers _modifiers_;
    private PFeatureType _featureType_;

    public AFeatureDecl()
    {
        // Constructor
    }

    public AFeatureDecl(
        @SuppressWarnings("hiding") TModelComment _modelComment_,
        @SuppressWarnings("hiding") PAnnotations _annotations_,
        @SuppressWarnings("hiding") PModifiers _modifiers_,
        @SuppressWarnings("hiding") PFeatureType _featureType_)
    {
        // Constructor
        setModelComment(_modelComment_);

        setAnnotations(_annotations_);

        setModifiers(_modifiers_);

        setFeatureType(_featureType_);

    }

    @Override
    public Object clone()
    {
        return new AFeatureDecl(
            cloneNode(this._modelComment_),
            cloneNode(this._annotations_),
            cloneNode(this._modifiers_),
            cloneNode(this._featureType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFeatureDecl(this);
    }

    public TModelComment getModelComment()
    {
        return this._modelComment_;
    }

    public void setModelComment(TModelComment node)
    {
        if(this._modelComment_ != null)
        {
            this._modelComment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modelComment_ = node;
    }

    public PAnnotations getAnnotations()
    {
        return this._annotations_;
    }

    public void setAnnotations(PAnnotations node)
    {
        if(this._annotations_ != null)
        {
            this._annotations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotations_ = node;
    }

    public PModifiers getModifiers()
    {
        return this._modifiers_;
    }

    public void setModifiers(PModifiers node)
    {
        if(this._modifiers_ != null)
        {
            this._modifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifiers_ = node;
    }

    public PFeatureType getFeatureType()
    {
        return this._featureType_;
    }

    public void setFeatureType(PFeatureType node)
    {
        if(this._featureType_ != null)
        {
            this._featureType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._featureType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modelComment_)
            + toString(this._annotations_)
            + toString(this._modifiers_)
            + toString(this._featureType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modelComment_ == child)
        {
            this._modelComment_ = null;
            return;
        }

        if(this._annotations_ == child)
        {
            this._annotations_ = null;
            return;
        }

        if(this._modifiers_ == child)
        {
            this._modifiers_ = null;
            return;
        }

        if(this._featureType_ == child)
        {
            this._featureType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modelComment_ == oldChild)
        {
            setModelComment((TModelComment) newChild);
            return;
        }

        if(this._annotations_ == oldChild)
        {
            setAnnotations((PAnnotations) newChild);
            return;
        }

        if(this._modifiers_ == oldChild)
        {
            setModifiers((PModifiers) newChild);
            return;
        }

        if(this._featureType_ == oldChild)
        {
            setFeatureType((PFeatureType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
