/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ANoneAccessCapability extends PAccessCapability
{
    private TNone _none_;

    public ANoneAccessCapability()
    {
        // Constructor
    }

    public ANoneAccessCapability(
        @SuppressWarnings("hiding") TNone _none_)
    {
        // Constructor
        setNone(_none_);

    }

    @Override
    public Object clone()
    {
        return new ANoneAccessCapability(
            cloneNode(this._none_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANoneAccessCapability(this);
    }

    public TNone getNone()
    {
        return this._none_;
    }

    public void setNone(TNone node)
    {
        if(this._none_ != null)
        {
            this._none_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._none_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._none_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._none_ == child)
        {
            this._none_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._none_ == oldChild)
        {
            setNone((TNone) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
