/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AArithmeticBinaryOperatorP2 extends PBinaryOperatorP2
{
    private PArithmeticBinaryOperatorP2 _arithmeticBinaryOperatorP2_;

    public AArithmeticBinaryOperatorP2()
    {
        // Constructor
    }

    public AArithmeticBinaryOperatorP2(
        @SuppressWarnings("hiding") PArithmeticBinaryOperatorP2 _arithmeticBinaryOperatorP2_)
    {
        // Constructor
        setArithmeticBinaryOperatorP2(_arithmeticBinaryOperatorP2_);

    }

    @Override
    public Object clone()
    {
        return new AArithmeticBinaryOperatorP2(
            cloneNode(this._arithmeticBinaryOperatorP2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArithmeticBinaryOperatorP2(this);
    }

    public PArithmeticBinaryOperatorP2 getArithmeticBinaryOperatorP2()
    {
        return this._arithmeticBinaryOperatorP2_;
    }

    public void setArithmeticBinaryOperatorP2(PArithmeticBinaryOperatorP2 node)
    {
        if(this._arithmeticBinaryOperatorP2_ != null)
        {
            this._arithmeticBinaryOperatorP2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithmeticBinaryOperatorP2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arithmeticBinaryOperatorP2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arithmeticBinaryOperatorP2_ == child)
        {
            this._arithmeticBinaryOperatorP2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arithmeticBinaryOperatorP2_ == oldChild)
        {
            setArithmeticBinaryOperatorP2((PArithmeticBinaryOperatorP2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
