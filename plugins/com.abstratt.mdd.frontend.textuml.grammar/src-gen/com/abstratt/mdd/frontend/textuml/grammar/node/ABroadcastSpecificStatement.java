/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ABroadcastSpecificStatement extends PSpecificStatement
{
    private TBroadcast _broadcast_;
    private PMinimalTypeIdentifier _signal_;

    public ABroadcastSpecificStatement()
    {
        // Constructor
    }

    public ABroadcastSpecificStatement(
        @SuppressWarnings("hiding") TBroadcast _broadcast_,
        @SuppressWarnings("hiding") PMinimalTypeIdentifier _signal_)
    {
        // Constructor
        setBroadcast(_broadcast_);

        setSignal(_signal_);

    }

    @Override
    public Object clone()
    {
        return new ABroadcastSpecificStatement(
            cloneNode(this._broadcast_),
            cloneNode(this._signal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABroadcastSpecificStatement(this);
    }

    public TBroadcast getBroadcast()
    {
        return this._broadcast_;
    }

    public void setBroadcast(TBroadcast node)
    {
        if(this._broadcast_ != null)
        {
            this._broadcast_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._broadcast_ = node;
    }

    public PMinimalTypeIdentifier getSignal()
    {
        return this._signal_;
    }

    public void setSignal(PMinimalTypeIdentifier node)
    {
        if(this._signal_ != null)
        {
            this._signal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._signal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._broadcast_)
            + toString(this._signal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._broadcast_ == child)
        {
            this._broadcast_ = null;
            return;
        }

        if(this._signal_ == child)
        {
            this._signal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._broadcast_ == oldChild)
        {
            setBroadcast((TBroadcast) newChild);
            return;
        }

        if(this._signal_ == oldChild)
        {
            setSignal((PMinimalTypeIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
