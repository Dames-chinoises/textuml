/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import java.util.*;
import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AAccessCapabilityList extends PAccessCapabilityList
{
    private PAccessCapability _accessCapability_;
    private final LinkedList<PAccessCapabilityTail> _accessCapabilityTail_ = new LinkedList<PAccessCapabilityTail>();

    public AAccessCapabilityList()
    {
        // Constructor
    }

    public AAccessCapabilityList(
        @SuppressWarnings("hiding") PAccessCapability _accessCapability_,
        @SuppressWarnings("hiding") List<PAccessCapabilityTail> _accessCapabilityTail_)
    {
        // Constructor
        setAccessCapability(_accessCapability_);

        setAccessCapabilityTail(_accessCapabilityTail_);

    }

    @Override
    public Object clone()
    {
        return new AAccessCapabilityList(
            cloneNode(this._accessCapability_),
            cloneList(this._accessCapabilityTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAccessCapabilityList(this);
    }

    public PAccessCapability getAccessCapability()
    {
        return this._accessCapability_;
    }

    public void setAccessCapability(PAccessCapability node)
    {
        if(this._accessCapability_ != null)
        {
            this._accessCapability_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accessCapability_ = node;
    }

    public LinkedList<PAccessCapabilityTail> getAccessCapabilityTail()
    {
        return this._accessCapabilityTail_;
    }

    public void setAccessCapabilityTail(List<PAccessCapabilityTail> list)
    {
        this._accessCapabilityTail_.clear();
        this._accessCapabilityTail_.addAll(list);
        for(PAccessCapabilityTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accessCapability_)
            + toString(this._accessCapabilityTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accessCapability_ == child)
        {
            this._accessCapability_ = null;
            return;
        }

        if(this._accessCapabilityTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accessCapability_ == oldChild)
        {
            setAccessCapability((PAccessCapability) newChild);
            return;
        }

        for(ListIterator<PAccessCapabilityTail> i = this._accessCapabilityTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAccessCapabilityTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
