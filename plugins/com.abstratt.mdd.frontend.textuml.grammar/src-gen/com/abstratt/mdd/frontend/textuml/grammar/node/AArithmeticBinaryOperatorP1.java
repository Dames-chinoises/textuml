/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AArithmeticBinaryOperatorP1 extends PBinaryOperatorP1
{
    private PArithmeticBinaryOperatorP1 _arithmeticBinaryOperatorP1_;

    public AArithmeticBinaryOperatorP1()
    {
        // Constructor
    }

    public AArithmeticBinaryOperatorP1(
        @SuppressWarnings("hiding") PArithmeticBinaryOperatorP1 _arithmeticBinaryOperatorP1_)
    {
        // Constructor
        setArithmeticBinaryOperatorP1(_arithmeticBinaryOperatorP1_);

    }

    @Override
    public Object clone()
    {
        return new AArithmeticBinaryOperatorP1(
            cloneNode(this._arithmeticBinaryOperatorP1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArithmeticBinaryOperatorP1(this);
    }

    public PArithmeticBinaryOperatorP1 getArithmeticBinaryOperatorP1()
    {
        return this._arithmeticBinaryOperatorP1_;
    }

    public void setArithmeticBinaryOperatorP1(PArithmeticBinaryOperatorP1 node)
    {
        if(this._arithmeticBinaryOperatorP1_ != null)
        {
            this._arithmeticBinaryOperatorP1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithmeticBinaryOperatorP1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arithmeticBinaryOperatorP1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arithmeticBinaryOperatorP1_ == child)
        {
            this._arithmeticBinaryOperatorP1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arithmeticBinaryOperatorP1_ == oldChild)
        {
            setArithmeticBinaryOperatorP1((PArithmeticBinaryOperatorP1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
