/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionSimpleBlockResolved extends PSimpleBlockResolved
{
    private PSimpleExpressionBlock _simpleExpressionBlock_;

    public AExpressionSimpleBlockResolved()
    {
        // Constructor
    }

    public AExpressionSimpleBlockResolved(
        @SuppressWarnings("hiding") PSimpleExpressionBlock _simpleExpressionBlock_)
    {
        // Constructor
        setSimpleExpressionBlock(_simpleExpressionBlock_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionSimpleBlockResolved(
            cloneNode(this._simpleExpressionBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionSimpleBlockResolved(this);
    }

    public PSimpleExpressionBlock getSimpleExpressionBlock()
    {
        return this._simpleExpressionBlock_;
    }

    public void setSimpleExpressionBlock(PSimpleExpressionBlock node)
    {
        if(this._simpleExpressionBlock_ != null)
        {
            this._simpleExpressionBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpressionBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleExpressionBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleExpressionBlock_ == child)
        {
            this._simpleExpressionBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleExpressionBlock_ == oldChild)
        {
            setSimpleExpressionBlock((PSimpleExpressionBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
