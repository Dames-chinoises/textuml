/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ARoles extends PRoles
{
    private TTo _to_;
    private PQualifiedIdentifierList _qualifiedIdentifierList_;

    public ARoles()
    {
        // Constructor
    }

    public ARoles(
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PQualifiedIdentifierList _qualifiedIdentifierList_)
    {
        // Constructor
        setTo(_to_);

        setQualifiedIdentifierList(_qualifiedIdentifierList_);

    }

    @Override
    public Object clone()
    {
        return new ARoles(
            cloneNode(this._to_),
            cloneNode(this._qualifiedIdentifierList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARoles(this);
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PQualifiedIdentifierList getQualifiedIdentifierList()
    {
        return this._qualifiedIdentifierList_;
    }

    public void setQualifiedIdentifierList(PQualifiedIdentifierList node)
    {
        if(this._qualifiedIdentifierList_ != null)
        {
            this._qualifiedIdentifierList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qualifiedIdentifierList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._to_)
            + toString(this._qualifiedIdentifierList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._qualifiedIdentifierList_ == child)
        {
            this._qualifiedIdentifierList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._qualifiedIdentifierList_ == oldChild)
        {
            setQualifiedIdentifierList((PQualifiedIdentifierList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
