/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AAnnotationsWithGuillemots extends PAnnotationsWithGuillemots
{
    private TLGuillemot _lGuillemot_;
    private PAnnotationList _annotationList_;
    private TRGuillemot _rGuillemot_;

    public AAnnotationsWithGuillemots()
    {
        // Constructor
    }

    public AAnnotationsWithGuillemots(
        @SuppressWarnings("hiding") TLGuillemot _lGuillemot_,
        @SuppressWarnings("hiding") PAnnotationList _annotationList_,
        @SuppressWarnings("hiding") TRGuillemot _rGuillemot_)
    {
        // Constructor
        setLGuillemot(_lGuillemot_);

        setAnnotationList(_annotationList_);

        setRGuillemot(_rGuillemot_);

    }

    @Override
    public Object clone()
    {
        return new AAnnotationsWithGuillemots(
            cloneNode(this._lGuillemot_),
            cloneNode(this._annotationList_),
            cloneNode(this._rGuillemot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAnnotationsWithGuillemots(this);
    }

    public TLGuillemot getLGuillemot()
    {
        return this._lGuillemot_;
    }

    public void setLGuillemot(TLGuillemot node)
    {
        if(this._lGuillemot_ != null)
        {
            this._lGuillemot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lGuillemot_ = node;
    }

    public PAnnotationList getAnnotationList()
    {
        return this._annotationList_;
    }

    public void setAnnotationList(PAnnotationList node)
    {
        if(this._annotationList_ != null)
        {
            this._annotationList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotationList_ = node;
    }

    public TRGuillemot getRGuillemot()
    {
        return this._rGuillemot_;
    }

    public void setRGuillemot(TRGuillemot node)
    {
        if(this._rGuillemot_ != null)
        {
            this._rGuillemot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rGuillemot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lGuillemot_)
            + toString(this._annotationList_)
            + toString(this._rGuillemot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lGuillemot_ == child)
        {
            this._lGuillemot_ = null;
            return;
        }

        if(this._annotationList_ == child)
        {
            this._annotationList_ = null;
            return;
        }

        if(this._rGuillemot_ == child)
        {
            this._rGuillemot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lGuillemot_ == oldChild)
        {
            setLGuillemot((TLGuillemot) newChild);
            return;
        }

        if(this._annotationList_ == oldChild)
        {
            setAnnotationList((PAnnotationList) newChild);
            return;
        }

        if(this._rGuillemot_ == oldChild)
        {
            setRGuillemot((TRGuillemot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
