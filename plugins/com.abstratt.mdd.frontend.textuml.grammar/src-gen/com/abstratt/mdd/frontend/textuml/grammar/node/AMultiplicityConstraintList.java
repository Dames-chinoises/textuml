/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import java.util.*;
import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AMultiplicityConstraintList extends PMultiplicityConstraintList
{
    private PMultiplicityConstraint _multiplicityConstraint_;
    private final LinkedList<PMultiplicityConstraintTail> _multiplicityConstraintTail_ = new LinkedList<PMultiplicityConstraintTail>();

    public AMultiplicityConstraintList()
    {
        // Constructor
    }

    public AMultiplicityConstraintList(
        @SuppressWarnings("hiding") PMultiplicityConstraint _multiplicityConstraint_,
        @SuppressWarnings("hiding") List<PMultiplicityConstraintTail> _multiplicityConstraintTail_)
    {
        // Constructor
        setMultiplicityConstraint(_multiplicityConstraint_);

        setMultiplicityConstraintTail(_multiplicityConstraintTail_);

    }

    @Override
    public Object clone()
    {
        return new AMultiplicityConstraintList(
            cloneNode(this._multiplicityConstraint_),
            cloneList(this._multiplicityConstraintTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplicityConstraintList(this);
    }

    public PMultiplicityConstraint getMultiplicityConstraint()
    {
        return this._multiplicityConstraint_;
    }

    public void setMultiplicityConstraint(PMultiplicityConstraint node)
    {
        if(this._multiplicityConstraint_ != null)
        {
            this._multiplicityConstraint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicityConstraint_ = node;
    }

    public LinkedList<PMultiplicityConstraintTail> getMultiplicityConstraintTail()
    {
        return this._multiplicityConstraintTail_;
    }

    public void setMultiplicityConstraintTail(List<PMultiplicityConstraintTail> list)
    {
        this._multiplicityConstraintTail_.clear();
        this._multiplicityConstraintTail_.addAll(list);
        for(PMultiplicityConstraintTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiplicityConstraint_)
            + toString(this._multiplicityConstraintTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiplicityConstraint_ == child)
        {
            this._multiplicityConstraint_ = null;
            return;
        }

        if(this._multiplicityConstraintTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiplicityConstraint_ == oldChild)
        {
            setMultiplicityConstraint((PMultiplicityConstraint) newChild);
            return;
        }

        for(ListIterator<PMultiplicityConstraintTail> i = this._multiplicityConstraintTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMultiplicityConstraintTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
