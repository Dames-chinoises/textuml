/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AInvariantKernel extends PInvariantKernel
{
    private PRegularInvariantConstraint _regularInvariantConstraint_;

    public AInvariantKernel()
    {
        // Constructor
    }

    public AInvariantKernel(
        @SuppressWarnings("hiding") PRegularInvariantConstraint _regularInvariantConstraint_)
    {
        // Constructor
        setRegularInvariantConstraint(_regularInvariantConstraint_);

    }

    @Override
    public Object clone()
    {
        return new AInvariantKernel(
            cloneNode(this._regularInvariantConstraint_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInvariantKernel(this);
    }

    public PRegularInvariantConstraint getRegularInvariantConstraint()
    {
        return this._regularInvariantConstraint_;
    }

    public void setRegularInvariantConstraint(PRegularInvariantConstraint node)
    {
        if(this._regularInvariantConstraint_ != null)
        {
            this._regularInvariantConstraint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._regularInvariantConstraint_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._regularInvariantConstraint_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._regularInvariantConstraint_ == child)
        {
            this._regularInvariantConstraint_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._regularInvariantConstraint_ == oldChild)
        {
            setRegularInvariantConstraint((PRegularInvariantConstraint) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
