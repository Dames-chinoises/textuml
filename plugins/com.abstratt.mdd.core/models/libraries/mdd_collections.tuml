[ModelLibrary]
model mdd_collections;

apply StandardProfileL2;

import mdd_types;

class Collection<T>
  query add(toAdd : T) : T[*];
  query count(predicate : {(:T) : Boolean}) : Integer;
  query includes(object : T) : Boolean;
  query includesAll(c2 : T[*]) : Boolean;
  query includesAny(c2 : T[*]) : Boolean;
  query isEmpty() : Boolean;
  query size() : Integer;
  query exists(predicate : {(:T) : Boolean}) : Boolean;
  query \any(predicate : {(:T) : Boolean}[0,1]) : T;
  query select(filter : {(:T) : Boolean}) : T[*];
  query collect(mapping : {(:T) : any}) : any[*];  
  query forAll(predicate : {(:T) : Boolean}) : Boolean;
  operation forEach(predicate : {(:T)});
  query sortedBy(c : {(:T,:T) : Integer}) : T[*];
  query asOrderedSet() : T[*] {ordered,unique};
  query asSequence() : T[*] {ordered,nonunique};
  query asSet() : T[*] {unique,unordered};
  query asBag() : T[*] {nonunique,unordered};
  query union(another : T[*]) : T[*];
  (* Collects and intersects all collections obtained from each of the elements in this collection. *)
  query collectMany(p : {(:T) : T[*]}) : T[*];
  query groupBy(grouper : {(:T) : any}) : Grouping<T>;
  query reduce(reductor : {(:T, :any[*]) : any[*]}, \initial : any[*]) : any;
  query sum(transformer : {(:T):Double}) : Double;
  query max(transformer : {(:T):Double}) : Double;
  query min(transformer : {(:T):Double}) : Double;
  query mode() : T;
  query median() : T;
  query join(delimiter : String := ", ") : String;
end;

class Grouping<T>
  query collect(group : {(:T[*]) : any}) : any[*];  
end;

class Sequence<T> specializes Collection<T>
  query at(i : Integer) : T;
  query head() : T[0,1];
  query tail() : T[*];
end;

class Set<T> specializes Collection<T>
end;

class Bag<T> specializes Collection<T>
  query count(element : T) : Integer; 
end;

class OrderedSet<T> specializes Set<T>
end;

end.