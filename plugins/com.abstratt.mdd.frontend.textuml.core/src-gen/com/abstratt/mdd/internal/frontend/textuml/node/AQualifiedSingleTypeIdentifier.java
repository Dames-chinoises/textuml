/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AQualifiedSingleTypeIdentifier extends PSingleTypeIdentifier
{
    private PMinimalTypeIdentifier _minimalTypeIdentifier_;
    private PTemplateBinding _templateBinding_;

    public AQualifiedSingleTypeIdentifier()
    {
        // Constructor
    }

    public AQualifiedSingleTypeIdentifier(
        @SuppressWarnings("hiding") PMinimalTypeIdentifier _minimalTypeIdentifier_,
        @SuppressWarnings("hiding") PTemplateBinding _templateBinding_)
    {
        // Constructor
        setMinimalTypeIdentifier(_minimalTypeIdentifier_);

        setTemplateBinding(_templateBinding_);

    }

    @Override
    public Object clone()
    {
        return new AQualifiedSingleTypeIdentifier(
            cloneNode(this._minimalTypeIdentifier_),
            cloneNode(this._templateBinding_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQualifiedSingleTypeIdentifier(this);
    }

    public PMinimalTypeIdentifier getMinimalTypeIdentifier()
    {
        return this._minimalTypeIdentifier_;
    }

    public void setMinimalTypeIdentifier(PMinimalTypeIdentifier node)
    {
        if(this._minimalTypeIdentifier_ != null)
        {
            this._minimalTypeIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minimalTypeIdentifier_ = node;
    }

    public PTemplateBinding getTemplateBinding()
    {
        return this._templateBinding_;
    }

    public void setTemplateBinding(PTemplateBinding node)
    {
        if(this._templateBinding_ != null)
        {
            this._templateBinding_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._templateBinding_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minimalTypeIdentifier_)
            + toString(this._templateBinding_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minimalTypeIdentifier_ == child)
        {
            this._minimalTypeIdentifier_ = null;
            return;
        }

        if(this._templateBinding_ == child)
        {
            this._templateBinding_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minimalTypeIdentifier_ == oldChild)
        {
            setMinimalTypeIdentifier((PMinimalTypeIdentifier) newChild);
            return;
        }

        if(this._templateBinding_ == oldChild)
        {
            setTemplateBinding((PTemplateBinding) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
