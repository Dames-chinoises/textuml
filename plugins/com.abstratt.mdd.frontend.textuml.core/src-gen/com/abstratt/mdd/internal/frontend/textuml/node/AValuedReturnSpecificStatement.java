/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AValuedReturnSpecificStatement extends PSpecificStatement
{
    private TReturn _return_;
    private PRootExpression _rootExpression_;

    public AValuedReturnSpecificStatement()
    {
        // Constructor
    }

    public AValuedReturnSpecificStatement(
        @SuppressWarnings("hiding") TReturn _return_,
        @SuppressWarnings("hiding") PRootExpression _rootExpression_)
    {
        // Constructor
        setReturn(_return_);

        setRootExpression(_rootExpression_);

    }

    @Override
    public Object clone()
    {
        return new AValuedReturnSpecificStatement(
            cloneNode(this._return_),
            cloneNode(this._rootExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAValuedReturnSpecificStatement(this);
    }

    public TReturn getReturn()
    {
        return this._return_;
    }

    public void setReturn(TReturn node)
    {
        if(this._return_ != null)
        {
            this._return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._return_ = node;
    }

    public PRootExpression getRootExpression()
    {
        return this._rootExpression_;
    }

    public void setRootExpression(PRootExpression node)
    {
        if(this._rootExpression_ != null)
        {
            this._rootExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rootExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._return_)
            + toString(this._rootExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._return_ == child)
        {
            this._return_ = null;
            return;
        }

        if(this._rootExpression_ == child)
        {
            this._rootExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(this._rootExpression_ == oldChild)
        {
            setRootExpression((PRootExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
