/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AIdentityBinaryOperator extends PBinaryOperator
{
    private TEquals _equals1_;
    private TEquals _equals2_;

    public AIdentityBinaryOperator()
    {
        // Constructor
    }

    public AIdentityBinaryOperator(
        @SuppressWarnings("hiding") TEquals _equals1_,
        @SuppressWarnings("hiding") TEquals _equals2_)
    {
        // Constructor
        setEquals1(_equals1_);

        setEquals2(_equals2_);

    }

    @Override
    public Object clone()
    {
        return new AIdentityBinaryOperator(
            cloneNode(this._equals1_),
            cloneNode(this._equals2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentityBinaryOperator(this);
    }

    public TEquals getEquals1()
    {
        return this._equals1_;
    }

    public void setEquals1(TEquals node)
    {
        if(this._equals1_ != null)
        {
            this._equals1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals1_ = node;
    }

    public TEquals getEquals2()
    {
        return this._equals2_;
    }

    public void setEquals2(TEquals node)
    {
        if(this._equals2_ != null)
        {
            this._equals2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equals1_)
            + toString(this._equals2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equals1_ == child)
        {
            this._equals1_ = null;
            return;
        }

        if(this._equals2_ == child)
        {
            this._equals2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equals1_ == oldChild)
        {
            setEquals1((TEquals) newChild);
            return;
        }

        if(this._equals2_ == oldChild)
        {
            setEquals2((TEquals) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
