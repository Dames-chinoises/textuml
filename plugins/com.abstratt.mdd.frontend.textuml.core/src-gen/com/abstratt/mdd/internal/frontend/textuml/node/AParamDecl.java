/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AParamDecl extends PParamDecl
{
    private PAnnotations _annotations_;
    private PParameterModifiers _parameterModifiers_;
    private PSimpleParamDecl _simpleParamDecl_;

    public AParamDecl()
    {
        // Constructor
    }

    public AParamDecl(
        @SuppressWarnings("hiding") PAnnotations _annotations_,
        @SuppressWarnings("hiding") PParameterModifiers _parameterModifiers_,
        @SuppressWarnings("hiding") PSimpleParamDecl _simpleParamDecl_)
    {
        // Constructor
        setAnnotations(_annotations_);

        setParameterModifiers(_parameterModifiers_);

        setSimpleParamDecl(_simpleParamDecl_);

    }

    @Override
    public Object clone()
    {
        return new AParamDecl(
            cloneNode(this._annotations_),
            cloneNode(this._parameterModifiers_),
            cloneNode(this._simpleParamDecl_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamDecl(this);
    }

    public PAnnotations getAnnotations()
    {
        return this._annotations_;
    }

    public void setAnnotations(PAnnotations node)
    {
        if(this._annotations_ != null)
        {
            this._annotations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotations_ = node;
    }

    public PParameterModifiers getParameterModifiers()
    {
        return this._parameterModifiers_;
    }

    public void setParameterModifiers(PParameterModifiers node)
    {
        if(this._parameterModifiers_ != null)
        {
            this._parameterModifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameterModifiers_ = node;
    }

    public PSimpleParamDecl getSimpleParamDecl()
    {
        return this._simpleParamDecl_;
    }

    public void setSimpleParamDecl(PSimpleParamDecl node)
    {
        if(this._simpleParamDecl_ != null)
        {
            this._simpleParamDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleParamDecl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._annotations_)
            + toString(this._parameterModifiers_)
            + toString(this._simpleParamDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._annotations_ == child)
        {
            this._annotations_ = null;
            return;
        }

        if(this._parameterModifiers_ == child)
        {
            this._parameterModifiers_ = null;
            return;
        }

        if(this._simpleParamDecl_ == child)
        {
            this._simpleParamDecl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._annotations_ == oldChild)
        {
            setAnnotations((PAnnotations) newChild);
            return;
        }

        if(this._parameterModifiers_ == oldChild)
        {
            setParameterModifiers((PParameterModifiers) newChild);
            return;
        }

        if(this._simpleParamDecl_ == oldChild)
        {
            setSimpleParamDecl((PSimpleParamDecl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
