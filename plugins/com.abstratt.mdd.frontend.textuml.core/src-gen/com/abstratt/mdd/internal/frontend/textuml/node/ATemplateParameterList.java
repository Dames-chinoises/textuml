/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import java.util.*;
import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class ATemplateParameterList extends PTemplateParameterList
{
    private PTemplateParameter _templateParameter_;
    private final LinkedList<PTemplateParameterTail> _templateParameterTail_ = new LinkedList<PTemplateParameterTail>();

    public ATemplateParameterList()
    {
        // Constructor
    }

    public ATemplateParameterList(
        @SuppressWarnings("hiding") PTemplateParameter _templateParameter_,
        @SuppressWarnings("hiding") List<PTemplateParameterTail> _templateParameterTail_)
    {
        // Constructor
        setTemplateParameter(_templateParameter_);

        setTemplateParameterTail(_templateParameterTail_);

    }

    @Override
    public Object clone()
    {
        return new ATemplateParameterList(
            cloneNode(this._templateParameter_),
            cloneList(this._templateParameterTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATemplateParameterList(this);
    }

    public PTemplateParameter getTemplateParameter()
    {
        return this._templateParameter_;
    }

    public void setTemplateParameter(PTemplateParameter node)
    {
        if(this._templateParameter_ != null)
        {
            this._templateParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._templateParameter_ = node;
    }

    public LinkedList<PTemplateParameterTail> getTemplateParameterTail()
    {
        return this._templateParameterTail_;
    }

    public void setTemplateParameterTail(List<PTemplateParameterTail> list)
    {
        this._templateParameterTail_.clear();
        this._templateParameterTail_.addAll(list);
        for(PTemplateParameterTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._templateParameter_)
            + toString(this._templateParameterTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._templateParameter_ == child)
        {
            this._templateParameter_ = null;
            return;
        }

        if(this._templateParameterTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._templateParameter_ == oldChild)
        {
            setTemplateParameter((PTemplateParameter) newChild);
            return;
        }

        for(ListIterator<PTemplateParameterTail> i = this._templateParameterTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTemplateParameterTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
