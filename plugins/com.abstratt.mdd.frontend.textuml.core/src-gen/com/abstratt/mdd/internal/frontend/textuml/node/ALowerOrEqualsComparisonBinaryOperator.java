/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class ALowerOrEqualsComparisonBinaryOperator extends PComparisonBinaryOperator
{
    private TLab _lab_;
    private TEquals _equals_;

    public ALowerOrEqualsComparisonBinaryOperator()
    {
        // Constructor
    }

    public ALowerOrEqualsComparisonBinaryOperator(
        @SuppressWarnings("hiding") TLab _lab_,
        @SuppressWarnings("hiding") TEquals _equals_)
    {
        // Constructor
        setLab(_lab_);

        setEquals(_equals_);

    }

    @Override
    public Object clone()
    {
        return new ALowerOrEqualsComparisonBinaryOperator(
            cloneNode(this._lab_),
            cloneNode(this._equals_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALowerOrEqualsComparisonBinaryOperator(this);
    }

    public TLab getLab()
    {
        return this._lab_;
    }

    public void setLab(TLab node)
    {
        if(this._lab_ != null)
        {
            this._lab_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lab_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lab_)
            + toString(this._equals_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lab_ == child)
        {
            this._lab_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lab_ == oldChild)
        {
            setLab((TLab) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
