/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AAnnotationValueSpec extends PAnnotationValueSpec
{
    private TIdentifier _identifier_;
    private TEquals _equals_;
    private PAnnotationValue _annotationValue_;

    public AAnnotationValueSpec()
    {
        // Constructor
    }

    public AAnnotationValueSpec(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PAnnotationValue _annotationValue_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setEquals(_equals_);

        setAnnotationValue(_annotationValue_);

    }

    @Override
    public Object clone()
    {
        return new AAnnotationValueSpec(
            cloneNode(this._identifier_),
            cloneNode(this._equals_),
            cloneNode(this._annotationValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAnnotationValueSpec(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PAnnotationValue getAnnotationValue()
    {
        return this._annotationValue_;
    }

    public void setAnnotationValue(PAnnotationValue node)
    {
        if(this._annotationValue_ != null)
        {
            this._annotationValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotationValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._equals_)
            + toString(this._annotationValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._annotationValue_ == child)
        {
            this._annotationValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._annotationValue_ == oldChild)
        {
            setAnnotationValue((PAnnotationValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
