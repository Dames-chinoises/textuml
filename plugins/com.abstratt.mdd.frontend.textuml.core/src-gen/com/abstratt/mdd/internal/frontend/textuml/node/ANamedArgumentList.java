/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import java.util.*;
import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class ANamedArgumentList extends PNamedArgumentList
{
    private PNamedArgument _namedArgument_;
    private final LinkedList<PNamedArgumentAdditional> _namedArgumentAdditional_ = new LinkedList<PNamedArgumentAdditional>();

    public ANamedArgumentList()
    {
        // Constructor
    }

    public ANamedArgumentList(
        @SuppressWarnings("hiding") PNamedArgument _namedArgument_,
        @SuppressWarnings("hiding") List<PNamedArgumentAdditional> _namedArgumentAdditional_)
    {
        // Constructor
        setNamedArgument(_namedArgument_);

        setNamedArgumentAdditional(_namedArgumentAdditional_);

    }

    @Override
    public Object clone()
    {
        return new ANamedArgumentList(
            cloneNode(this._namedArgument_),
            cloneList(this._namedArgumentAdditional_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANamedArgumentList(this);
    }

    public PNamedArgument getNamedArgument()
    {
        return this._namedArgument_;
    }

    public void setNamedArgument(PNamedArgument node)
    {
        if(this._namedArgument_ != null)
        {
            this._namedArgument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._namedArgument_ = node;
    }

    public LinkedList<PNamedArgumentAdditional> getNamedArgumentAdditional()
    {
        return this._namedArgumentAdditional_;
    }

    public void setNamedArgumentAdditional(List<PNamedArgumentAdditional> list)
    {
        this._namedArgumentAdditional_.clear();
        this._namedArgumentAdditional_.addAll(list);
        for(PNamedArgumentAdditional e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._namedArgument_)
            + toString(this._namedArgumentAdditional_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._namedArgument_ == child)
        {
            this._namedArgument_ = null;
            return;
        }

        if(this._namedArgumentAdditional_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._namedArgument_ == oldChild)
        {
            setNamedArgument((PNamedArgument) newChild);
            return;
        }

        for(ListIterator<PNamedArgumentAdditional> i = this._namedArgumentAdditional_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNamedArgumentAdditional) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
