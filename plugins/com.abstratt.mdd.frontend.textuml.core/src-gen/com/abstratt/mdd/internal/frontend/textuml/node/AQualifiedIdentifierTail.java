/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AQualifiedIdentifierTail extends PQualifiedIdentifierTail
{
    private TNamespaceSeparator _namespaceSeparator_;
    private PQualifiedIdentifierBase _qualifiedIdentifierBase_;

    public AQualifiedIdentifierTail()
    {
        // Constructor
    }

    public AQualifiedIdentifierTail(
        @SuppressWarnings("hiding") TNamespaceSeparator _namespaceSeparator_,
        @SuppressWarnings("hiding") PQualifiedIdentifierBase _qualifiedIdentifierBase_)
    {
        // Constructor
        setNamespaceSeparator(_namespaceSeparator_);

        setQualifiedIdentifierBase(_qualifiedIdentifierBase_);

    }

    @Override
    public Object clone()
    {
        return new AQualifiedIdentifierTail(
            cloneNode(this._namespaceSeparator_),
            cloneNode(this._qualifiedIdentifierBase_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQualifiedIdentifierTail(this);
    }

    public TNamespaceSeparator getNamespaceSeparator()
    {
        return this._namespaceSeparator_;
    }

    public void setNamespaceSeparator(TNamespaceSeparator node)
    {
        if(this._namespaceSeparator_ != null)
        {
            this._namespaceSeparator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._namespaceSeparator_ = node;
    }

    public PQualifiedIdentifierBase getQualifiedIdentifierBase()
    {
        return this._qualifiedIdentifierBase_;
    }

    public void setQualifiedIdentifierBase(PQualifiedIdentifierBase node)
    {
        if(this._qualifiedIdentifierBase_ != null)
        {
            this._qualifiedIdentifierBase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qualifiedIdentifierBase_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._namespaceSeparator_)
            + toString(this._qualifiedIdentifierBase_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._namespaceSeparator_ == child)
        {
            this._namespaceSeparator_ = null;
            return;
        }

        if(this._qualifiedIdentifierBase_ == child)
        {
            this._qualifiedIdentifierBase_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._namespaceSeparator_ == oldChild)
        {
            setNamespaceSeparator((TNamespaceSeparator) newChild);
            return;
        }

        if(this._qualifiedIdentifierBase_ == oldChild)
        {
            setQualifiedIdentifierBase((PQualifiedIdentifierBase) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
