/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AOperationPrecondition extends POperationPrecondition
{
    private TModelComment _modelComment_;
    private TPrecondition _precondition_;
    private TIdentifier _identifier_;
    private PPreconditionSignature _preconditionSignature_;
    private PConstraintException _constraintException_;
    private PExpressionBlock _expressionBlock_;

    public AOperationPrecondition()
    {
        // Constructor
    }

    public AOperationPrecondition(
        @SuppressWarnings("hiding") TModelComment _modelComment_,
        @SuppressWarnings("hiding") TPrecondition _precondition_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PPreconditionSignature _preconditionSignature_,
        @SuppressWarnings("hiding") PConstraintException _constraintException_,
        @SuppressWarnings("hiding") PExpressionBlock _expressionBlock_)
    {
        // Constructor
        setModelComment(_modelComment_);

        setPrecondition(_precondition_);

        setIdentifier(_identifier_);

        setPreconditionSignature(_preconditionSignature_);

        setConstraintException(_constraintException_);

        setExpressionBlock(_expressionBlock_);

    }

    @Override
    public Object clone()
    {
        return new AOperationPrecondition(
            cloneNode(this._modelComment_),
            cloneNode(this._precondition_),
            cloneNode(this._identifier_),
            cloneNode(this._preconditionSignature_),
            cloneNode(this._constraintException_),
            cloneNode(this._expressionBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOperationPrecondition(this);
    }

    public TModelComment getModelComment()
    {
        return this._modelComment_;
    }

    public void setModelComment(TModelComment node)
    {
        if(this._modelComment_ != null)
        {
            this._modelComment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modelComment_ = node;
    }

    public TPrecondition getPrecondition()
    {
        return this._precondition_;
    }

    public void setPrecondition(TPrecondition node)
    {
        if(this._precondition_ != null)
        {
            this._precondition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._precondition_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PPreconditionSignature getPreconditionSignature()
    {
        return this._preconditionSignature_;
    }

    public void setPreconditionSignature(PPreconditionSignature node)
    {
        if(this._preconditionSignature_ != null)
        {
            this._preconditionSignature_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._preconditionSignature_ = node;
    }

    public PConstraintException getConstraintException()
    {
        return this._constraintException_;
    }

    public void setConstraintException(PConstraintException node)
    {
        if(this._constraintException_ != null)
        {
            this._constraintException_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constraintException_ = node;
    }

    public PExpressionBlock getExpressionBlock()
    {
        return this._expressionBlock_;
    }

    public void setExpressionBlock(PExpressionBlock node)
    {
        if(this._expressionBlock_ != null)
        {
            this._expressionBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modelComment_)
            + toString(this._precondition_)
            + toString(this._identifier_)
            + toString(this._preconditionSignature_)
            + toString(this._constraintException_)
            + toString(this._expressionBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modelComment_ == child)
        {
            this._modelComment_ = null;
            return;
        }

        if(this._precondition_ == child)
        {
            this._precondition_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._preconditionSignature_ == child)
        {
            this._preconditionSignature_ = null;
            return;
        }

        if(this._constraintException_ == child)
        {
            this._constraintException_ = null;
            return;
        }

        if(this._expressionBlock_ == child)
        {
            this._expressionBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modelComment_ == oldChild)
        {
            setModelComment((TModelComment) newChild);
            return;
        }

        if(this._precondition_ == oldChild)
        {
            setPrecondition((TPrecondition) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._preconditionSignature_ == oldChild)
        {
            setPreconditionSignature((PPreconditionSignature) newChild);
            return;
        }

        if(this._constraintException_ == oldChild)
        {
            setConstraintException((PConstraintException) newChild);
            return;
        }

        if(this._expressionBlock_ == oldChild)
        {
            setExpressionBlock((PExpressionBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
