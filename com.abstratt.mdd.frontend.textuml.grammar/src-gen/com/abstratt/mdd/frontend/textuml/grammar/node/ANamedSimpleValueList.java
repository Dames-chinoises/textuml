/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import java.util.*;
import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ANamedSimpleValueList extends PNamedSimpleValueList
{
    private PNamedSimpleValue _namedSimpleValue_;
    private final LinkedList<PNamedSimpleValueAdditional> _namedSimpleValueAdditional_ = new LinkedList<PNamedSimpleValueAdditional>();

    public ANamedSimpleValueList()
    {
        // Constructor
    }

    public ANamedSimpleValueList(
        @SuppressWarnings("hiding") PNamedSimpleValue _namedSimpleValue_,
        @SuppressWarnings("hiding") List<PNamedSimpleValueAdditional> _namedSimpleValueAdditional_)
    {
        // Constructor
        setNamedSimpleValue(_namedSimpleValue_);

        setNamedSimpleValueAdditional(_namedSimpleValueAdditional_);

    }

    @Override
    public Object clone()
    {
        return new ANamedSimpleValueList(
            cloneNode(this._namedSimpleValue_),
            cloneList(this._namedSimpleValueAdditional_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANamedSimpleValueList(this);
    }

    public PNamedSimpleValue getNamedSimpleValue()
    {
        return this._namedSimpleValue_;
    }

    public void setNamedSimpleValue(PNamedSimpleValue node)
    {
        if(this._namedSimpleValue_ != null)
        {
            this._namedSimpleValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._namedSimpleValue_ = node;
    }

    public LinkedList<PNamedSimpleValueAdditional> getNamedSimpleValueAdditional()
    {
        return this._namedSimpleValueAdditional_;
    }

    public void setNamedSimpleValueAdditional(List<PNamedSimpleValueAdditional> list)
    {
        this._namedSimpleValueAdditional_.clear();
        this._namedSimpleValueAdditional_.addAll(list);
        for(PNamedSimpleValueAdditional e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._namedSimpleValue_)
            + toString(this._namedSimpleValueAdditional_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._namedSimpleValue_ == child)
        {
            this._namedSimpleValue_ = null;
            return;
        }

        if(this._namedSimpleValueAdditional_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._namedSimpleValue_ == oldChild)
        {
            setNamedSimpleValue((PNamedSimpleValue) newChild);
            return;
        }

        for(ListIterator<PNamedSimpleValueAdditional> i = this._namedSimpleValueAdditional_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNamedSimpleValueAdditional) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
