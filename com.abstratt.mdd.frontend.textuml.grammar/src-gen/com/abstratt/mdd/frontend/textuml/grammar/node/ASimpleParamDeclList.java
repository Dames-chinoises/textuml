/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleParamDeclList extends PSimpleParamDeclList
{
    private PSimpleParamDecl _simpleParamDecl_;
    private PSimpleParamDeclListTail _simpleParamDeclListTail_;

    public ASimpleParamDeclList()
    {
        // Constructor
    }

    public ASimpleParamDeclList(
        @SuppressWarnings("hiding") PSimpleParamDecl _simpleParamDecl_,
        @SuppressWarnings("hiding") PSimpleParamDeclListTail _simpleParamDeclListTail_)
    {
        // Constructor
        setSimpleParamDecl(_simpleParamDecl_);

        setSimpleParamDeclListTail(_simpleParamDeclListTail_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleParamDeclList(
            cloneNode(this._simpleParamDecl_),
            cloneNode(this._simpleParamDeclListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleParamDeclList(this);
    }

    public PSimpleParamDecl getSimpleParamDecl()
    {
        return this._simpleParamDecl_;
    }

    public void setSimpleParamDecl(PSimpleParamDecl node)
    {
        if(this._simpleParamDecl_ != null)
        {
            this._simpleParamDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleParamDecl_ = node;
    }

    public PSimpleParamDeclListTail getSimpleParamDeclListTail()
    {
        return this._simpleParamDeclListTail_;
    }

    public void setSimpleParamDeclListTail(PSimpleParamDeclListTail node)
    {
        if(this._simpleParamDeclListTail_ != null)
        {
            this._simpleParamDeclListTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleParamDeclListTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleParamDecl_)
            + toString(this._simpleParamDeclListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleParamDecl_ == child)
        {
            this._simpleParamDecl_ = null;
            return;
        }

        if(this._simpleParamDeclListTail_ == child)
        {
            this._simpleParamDeclListTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleParamDecl_ == oldChild)
        {
            setSimpleParamDecl((PSimpleParamDecl) newChild);
            return;
        }

        if(this._simpleParamDeclListTail_ == oldChild)
        {
            setSimpleParamDeclListTail((PSimpleParamDeclListTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
