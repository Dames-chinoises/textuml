/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryExpression extends PExpression
{
    private PExpression _expression_;
    private PBinaryOperator _binaryOperator_;
    private POperand _operand_;

    public ABinaryExpression()
    {
        // Constructor
    }

    public ABinaryExpression(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") PBinaryOperator _binaryOperator_,
        @SuppressWarnings("hiding") POperand _operand_)
    {
        // Constructor
        setExpression(_expression_);

        setBinaryOperator(_binaryOperator_);

        setOperand(_operand_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryExpression(
            cloneNode(this._expression_),
            cloneNode(this._binaryOperator_),
            cloneNode(this._operand_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryExpression(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public PBinaryOperator getBinaryOperator()
    {
        return this._binaryOperator_;
    }

    public void setBinaryOperator(PBinaryOperator node)
    {
        if(this._binaryOperator_ != null)
        {
            this._binaryOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._binaryOperator_ = node;
    }

    public POperand getOperand()
    {
        return this._operand_;
    }

    public void setOperand(POperand node)
    {
        if(this._operand_ != null)
        {
            this._operand_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operand_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._binaryOperator_)
            + toString(this._operand_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._binaryOperator_ == child)
        {
            this._binaryOperator_ = null;
            return;
        }

        if(this._operand_ == child)
        {
            this._operand_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._binaryOperator_ == oldChild)
        {
            setBinaryOperator((PBinaryOperator) newChild);
            return;
        }

        if(this._operand_ == oldChild)
        {
            setOperand((POperand) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
