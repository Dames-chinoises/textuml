/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AAnnotationOptionalValueSpecs extends PAnnotationOptionalValueSpecs
{
    private TLParen _lParen_;
    private PAnnotationValueSpecList _annotationValueSpecList_;
    private TRParen _rParen_;

    public AAnnotationOptionalValueSpecs()
    {
        // Constructor
    }

    public AAnnotationOptionalValueSpecs(
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PAnnotationValueSpecList _annotationValueSpecList_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setLParen(_lParen_);

        setAnnotationValueSpecList(_annotationValueSpecList_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new AAnnotationOptionalValueSpecs(
            cloneNode(this._lParen_),
            cloneNode(this._annotationValueSpecList_),
            cloneNode(this._rParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAnnotationOptionalValueSpecs(this);
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PAnnotationValueSpecList getAnnotationValueSpecList()
    {
        return this._annotationValueSpecList_;
    }

    public void setAnnotationValueSpecList(PAnnotationValueSpecList node)
    {
        if(this._annotationValueSpecList_ != null)
        {
            this._annotationValueSpecList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._annotationValueSpecList_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lParen_)
            + toString(this._annotationValueSpecList_)
            + toString(this._rParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._annotationValueSpecList_ == child)
        {
            this._annotationValueSpecList_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._annotationValueSpecList_ == oldChild)
        {
            setAnnotationValueSpecList((PAnnotationValueSpecList) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
