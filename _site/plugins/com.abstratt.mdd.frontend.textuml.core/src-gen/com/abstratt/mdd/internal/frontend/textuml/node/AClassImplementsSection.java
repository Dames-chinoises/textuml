/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AClassImplementsSection extends PClassImplementsSection
{
    private TImplements _implements_;
    private PClassImplementsList _classImplementsList_;

    public AClassImplementsSection()
    {
        // Constructor
    }

    public AClassImplementsSection(
        @SuppressWarnings("hiding") TImplements _implements_,
        @SuppressWarnings("hiding") PClassImplementsList _classImplementsList_)
    {
        // Constructor
        setImplements(_implements_);

        setClassImplementsList(_classImplementsList_);

    }

    @Override
    public Object clone()
    {
        return new AClassImplementsSection(
            cloneNode(this._implements_),
            cloneNode(this._classImplementsList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassImplementsSection(this);
    }

    public TImplements getImplements()
    {
        return this._implements_;
    }

    public void setImplements(TImplements node)
    {
        if(this._implements_ != null)
        {
            this._implements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._implements_ = node;
    }

    public PClassImplementsList getClassImplementsList()
    {
        return this._classImplementsList_;
    }

    public void setClassImplementsList(PClassImplementsList node)
    {
        if(this._classImplementsList_ != null)
        {
            this._classImplementsList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classImplementsList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._implements_)
            + toString(this._classImplementsList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._implements_ == child)
        {
            this._implements_ = null;
            return;
        }

        if(this._classImplementsList_ == child)
        {
            this._classImplementsList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._implements_ == oldChild)
        {
            setImplements((TImplements) newChild);
            return;
        }

        if(this._classImplementsList_ == oldChild)
        {
            setClassImplementsList((PClassImplementsList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
