/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AWhileStatement extends PWhileStatement
{
    private TWhile _while_;
    private PLoopTest _loopTest_;
    private TDo _do_;
    private PWhileLoopBody _whileLoopBody_;

    public AWhileStatement()
    {
        // Constructor
    }

    public AWhileStatement(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PLoopTest _loopTest_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PWhileLoopBody _whileLoopBody_)
    {
        // Constructor
        setWhile(_while_);

        setLoopTest(_loopTest_);

        setDo(_do_);

        setWhileLoopBody(_whileLoopBody_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStatement(
            cloneNode(this._while_),
            cloneNode(this._loopTest_),
            cloneNode(this._do_),
            cloneNode(this._whileLoopBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStatement(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PLoopTest getLoopTest()
    {
        return this._loopTest_;
    }

    public void setLoopTest(PLoopTest node)
    {
        if(this._loopTest_ != null)
        {
            this._loopTest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopTest_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PWhileLoopBody getWhileLoopBody()
    {
        return this._whileLoopBody_;
    }

    public void setWhileLoopBody(PWhileLoopBody node)
    {
        if(this._whileLoopBody_ != null)
        {
            this._whileLoopBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileLoopBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._loopTest_)
            + toString(this._do_)
            + toString(this._whileLoopBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._loopTest_ == child)
        {
            this._loopTest_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._whileLoopBody_ == child)
        {
            this._whileLoopBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._loopTest_ == oldChild)
        {
            setLoopTest((PLoopTest) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._whileLoopBody_ == oldChild)
        {
            setWhileLoopBody((PWhileLoopBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
