/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.node;

import com.abstratt.mdd.internal.frontend.textuml.analysis.*;

@SuppressWarnings("nls")
public final class AVisibilityModifier extends PModifier
{
    private PVisibilityModifier _visibilityModifier_;

    public AVisibilityModifier()
    {
        // Constructor
    }

    public AVisibilityModifier(
        @SuppressWarnings("hiding") PVisibilityModifier _visibilityModifier_)
    {
        // Constructor
        setVisibilityModifier(_visibilityModifier_);

    }

    @Override
    public Object clone()
    {
        return new AVisibilityModifier(
            cloneNode(this._visibilityModifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVisibilityModifier(this);
    }

    public PVisibilityModifier getVisibilityModifier()
    {
        return this._visibilityModifier_;
    }

    public void setVisibilityModifier(PVisibilityModifier node)
    {
        if(this._visibilityModifier_ != null)
        {
            this._visibilityModifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._visibilityModifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._visibilityModifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._visibilityModifier_ == child)
        {
            this._visibilityModifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._visibilityModifier_ == oldChild)
        {
            setVisibilityModifier((PVisibilityModifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
